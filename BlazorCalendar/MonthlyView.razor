@using System.Globalization
@using BlazorCalendar.Components
@using BlazorCalendar.Models
@using BlazorCalendar.Styles

@inherits CalendarBase

@{
    const int MONTH_DAYS = 32; 
    const int NUMBER_OF_CELLS = 42;
    //CultureInfo.DefaultThreadCurrentCulture = new CultureInfo("dz-DZ");
    CultureInfo.DefaultThreadCurrentCulture = DateTimeUtil.GetPersianCulture();
    CultureInfo.DefaultThreadCurrentUICulture = DateTimeUtil.GetPersianCulture();


    var LastDate = new System.DateTime(FirstDate.Year, FirstDate.Month, 1).AddMonths(1);
    MonthState CurrentCalendarState = MonthState.LastMonth;
    System.DateTime DayCounter = FirstDate;
    System.DateTime Today = DateTimeUtil.TodayDate;
    string[] AbbreviatedDayNames = CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames;
    int OffsetCell = 0;
    string? isHidden = DisplayedView == DisplayedView.Monthly ? null : "hidden-element"; 
    string? CSSbackground = null;
    string? CSSToday = null;

    // The sorting must be done each time we redraw in case the user moves the spots
    if (TasksList != null)
    {
        TasksList = TasksList.OrderBy(x => x.DateStart)
                             .ThenByDescending(x => x.DateEnd).ToArray();
    }
}

<div class="@isHidden monthly-calendar" style="@Style">
        
    @for (var i = 0; i < 7; i++)
    {
        var nod = Dates.GetNumOfDay(i);

        <span class="header-name noselect" style="@HeaderStyle">
            @AbbreviatedDayNames[nod]
        </span> 
    }

    @for (var i = 0; i < NUMBER_OF_CELLS; i++)
    {   
        if ( CurrentCalendarState == MonthState.LastMonth ) 
        {
            int v = Dates.GetNumOfDay(i);
            bool isCellFirstDayOfCurrentMonth = (int)FirstDate.DayOfWeek == v;
            if (isCellFirstDayOfCurrentMonth)   
            {
                CurrentCalendarState = MonthState.CurrentMonth; 
                var dayClick = DayCounter;
                CSSbackground = GetColorForHolydays(dayClick);
                string formattedDate = DayCounter.ToShortDateString();//DayCounter.GetPersianDayOfMonth().ToString() + '-' + DayCounter.GetPersianMonth().ToString();

                <MonthCell OnClick="e => ClickDayInternal(e, dayClick)"
                           Style="@(CSSbackground)"
                           OnDrop="() => HandleDayOnDrop(dayClick)">
                    @(formattedDate)
                </MonthCell>

                DayCounter = DayCounter.AddDays(1);
                OffsetCell = i;
            } 
            else
            {
                <DisabledMonthCell HandleClickOutsideCurrentMonthClick="() => HandleClickOutsideCurrentMonthClick(-1)" />
            }
        }
        else if ( CurrentCalendarState == MonthState.CurrentMonth )
        {
            bool isCellLastDayOfCurrentMonth = DayCounter >= LastDate;
            if (isCellLastDayOfCurrentMonth) 
            {
                CurrentCalendarState = MonthState.NextMonth;
                <DisabledMonthCell HandleClickOutsideCurrentMonthClick="() => HandleClickOutsideCurrentMonthClick(1)" />
            }
            else
            {
                System.DateTime _dayClick = DayCounter;
                CSSbackground = GetColorForHolydays(_dayClick);
                if (HighlightToday)
                {
                    CSSToday = DayCounter == Today ? "monthly-today" : null;
                }
                string formattedDate = DayCounter.ToShortDateString();//DayCounter.GetPersianDayOfMonth().ToString() + '-' + DayCounter.GetPersianMonth().ToString();
                <MonthCell OnClick="e => ClickDayInternal(e, _dayClick)"
                           Style="@(CSSbackground)"
                           Class="@(CSSToday)"
                           OnDrop="() => HandleDayOnDrop(_dayClick)">
                    @(formattedDate)
               </MonthCell>

                DayCounter = DayCounter.AddDays(1);
            }
        }
        else if ( CurrentCalendarState == MonthState.NextMonth )
        {
            <DisabledMonthCell HandleClickOutsideCurrentMonthClick="() => HandleClickOutsideCurrentMonthClick(1)" />
        }
    }
        
    @if ( TasksList != null )
    {
    var occupiedPosition = new TaskPosition[MONTH_DAYS];
        for (int i = 0; i < MONTH_DAYS; ++i)
        {
            occupiedPosition[i] = new TaskPosition();
        }

        string? classPosition;
        string taskContent = "";  
        string? taskComment = null;   
        bool onmMultiLine = false;  
        bool draggable = false;

        for (var k = 0; k < TasksList.Length; k++)
        {
            Tasks t = TasksList[k];

            if (( t.DateStart.Date <= FirstDate && FirstDate <= t.DateEnd.Date ) || 
                ( t.DateStart.Date > FirstDate && LastDate > t.DateEnd.Date ) || 
                ( t.DateStart.Date < LastDate && LastDate <= t.DateEnd.Date ))
            {
                draggable = t.NotBeDraggable ? false : Draggable;

                 // Reframes dates in the month
                 System.DateTime Start = t.DateStart.Date < FirstDate ? FirstDate : t.DateStart.Date;
                 System.DateTime End = t.DateEnd.Date >= LastDate ? LastDate.AddDays(-1) : t.DateEnd.Date;

                // 7 => num of colum (a week..)
                // + 2 => the 1st row is the week name
                int x = (Start.Day + OffsetCell - 1) % 7 + 1; 
                int y = (Start.Day + OffsetCell - 1) / 7 + 2;
                int s = (int)(End.Date - Start.Date).TotalDays + 1;

                classPosition = null;

                TaskPosition position = occupiedPosition[Start.Day];

                if ( position.Top == false )
                {
                    for (int i = Start.Day; i < Start.Day + s; ++i)
                    {
                        occupiedPosition[i].Top = true;
                    }
                    classPosition = "monthly-task-first";
                } 
                else if ( position.Center == false )
                {
                    for (int i = Start.Day; i < Start.Day + s; ++i)
                    {
                        occupiedPosition[i].Center = true;
                    }
                    classPosition = "monthly-task-second";
                }
                else if (position.Bottom == false)
                {
                    for (int i = Start.Day; i < Start.Day + s; ++i)
                    {
                        occupiedPosition[i].Bottom = true;
                    }
                    classPosition = "monthly-task-bottom";
                }

                string borderClass = "border-start";
                do
                {
                    string row = $"grid-column:{x} / span {s}; grid-row:{y};";

                    if ( classPosition != null )
                    {   
                        if ( PriorityDisplay == PriorityLabel.Code )
                        {   
                            taskContent = string.IsNullOrWhiteSpace(t.Code) ? t.Caption : t.Code;
                        }
                        else
                        {   
                            taskContent = string.IsNullOrWhiteSpace(t.Caption) ? t.Code : t.Caption;
                        }

                        // If there is time, add start time at begening
                        if ( t.DateStart.Hour + t.DateStart.Minute > 0 )
                        {
                            taskContent =  $"{t.DateStart.ToString("t")} {taskContent}" ;
                        }

                        taskComment = string.IsNullOrWhiteSpace(t.Comment) ? null : t.Comment;

                        string taskColor = Colors.GetHatching(t.FillStyle, t.Color);
                        if (!String.IsNullOrEmpty(t.ForeColor))
                        {
                            taskColor = taskColor + $"color:{t.ForeColor}";
                        }

                        <div class="fade-in monthly-task @borderClass cursor-pointer @classPosition" 
                             id="task-@t.ID"
                             style="@row @taskColor" 
                             title="@taskComment"
                             draggable="@draggable.ToString()"
                             @onclick="e => ClickTaskInternal(e, t.ID, Start)"
                             @ondragstart="() => HandleDragStart(t.ID)">
                            @taskContent
                        </div>
                    }
                    else
                    {
                        // Mode 2 tasks in cell => we display "more..."
                        <div class="fade-in monthly-more-tasks noselect"
                             style=@($"grid-column:{x} / span 1; grid-row:{y}; {@GetColorForHolydays(Start)}")
                        @onclick="e => ClickAllDayInternal(e, Start)">
                            @($"+ {occupiedPosition[Start.Day].Counter - 2} ...")
                        </div>
                    }

                    onmMultiLine = false;
                    if (x + s > 8) 
                    {
                        onmMultiLine = true;

                        Start = Start.AddDays(8 - x); 
                        End = t.DateEnd.Date >= LastDate ? LastDate.AddDays(-1) : t.DateEnd.Date;

                        x = (Start.Day + OffsetCell - 1) % 7 + 1; 
                        y = (Start.Day + OffsetCell - 1) / 7 + 2;
                        s = (int)(End.Date - Start.Date).TotalDays + 1;

                        borderClass = "";
                    }

                } while ( onmMultiLine );

                // Start et End may have been modified, I redefine them for the whole month
                Start = t.DateStart.Date < FirstDate ? FirstDate : t.DateStart.Date; 
                End = t.DateEnd.Date >= LastDate ? LastDate.AddDays(-1) : t.DateEnd.Date;

                for (var d = Start.Day; d <= End.Day; d++)
                {     
                    occupiedPosition[d].Counter++;
                }

            }
        }
    }


</div>
